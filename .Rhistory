# ------------------------------------------------------------------------------------------------------------------------
# 1. Create a new factor variable in the dataset with tho levels - "Weekday" and "weekend" indicating whether a given date is a weekday or a weekend day.
#2. Make a panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekdays or weekend days (y-axis)
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$weekday, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("Interval", "AverageNumberofStepsTaken")
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + geom_area(fill="blue", alpha=.2)
#TS2 <- TS2 + facet_wrap(~daytype)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS)
dev.off()
ActivityDataTS2
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$weekday, ActivityData$interval), FUN=mean, na.rm = TRUE)
View(ActivityData)
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
ActivityDataTS2
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken")
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + geom_area(fill="blue", alpha=.2)
#TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS)
dev.off()
TS2
TS2 <- TS2 + facet_wrap(~DayType)
TS2
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken")
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + geom_area(fill="blue", alpha=.2)
TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS)
dev.off()
TS2
head(ActivityDataTS2)
head(ActivityDataTS2)
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
ggsave(filename="timeseries2.png", plot=TS2)
dev.off()
TS2
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS2)
dev.off()
# ------------------------------------------------------------------------------------------------------------------------
# Loading and preprocessing the data
# ------------------------------------------------------------------------------------------------------------------------
library(plyr)
library(data.table)
library(dplyr)
library(ggplot2)
#Note for self - may have to modify date format
#setwd("C:\\Users\\opinon3\\OneDrive\\Documents\\Coursera_ReproducibleResearch\\PeerAssessment1")
setwd("C:\\Users\\Olivia\\OneDrive\\Documents\\Coursera_ReproducibleResearch\\PeerAssessment1")
ActivityData <- read.csv("./repdata_data_activity/activity.csv", stringsAsFactors=FALSE)
# Preprocess the data
# Transform the date into a date format
ActivityData$date <- as.POSIXct(ActivityData$date, format="%Y-%m-%d")
# Get the day of the week from the data
ActivityData$day <- tolower(weekdays(ActivityData$date))
# Identify if day is a week day or not
ActivityData$daytype <- ifelse(ActivityData$day == "saturday" | ActivityData$day == "sunday", "weekend", "weekday")
# ------------------------------------------------------------------------------------------------------------------------
# What is the mean total number of steps taken per day
# ------------------------------------------------------------------------------------------------------------------------
# 1. Calculate the total number of steps taken per day
ActivityDataSummary <- aggregate(ActivityData[, "steps"], by = ActivityData["date"], FUN=sum, na.rm = TRUE)
colnames(ActivityDataSummary) <- c("Date", "TotalSteps")
# This one works too: ActivityData %>% group_by(date) %>% summarize(steps = sum(steps))
head(ActivityDataSummary)
# 2. Make a histogram of the total number of steps taken each day
hist(ActivityDataSummary$TotalSteps, breaks = seq(from = 0, to = 25000, by = 500), col="green", xlab = "Total number of steps taken per day", ylab = "Frequency", main = "Histogram of the total number of steps taken per day")
##### 2. Make a histogram of the total number of steps taken each day - NOT THIS
# png("histogram.png",width=800,height=800,units="px",bg="transparent")
# plot <- ggplot(ActivityDataSummary, aes(factor(Date), TotalSteps, fill = Date))
# plot <- plot + labs(title = expression(paste('Total number of steps taken per day')), x = "Date", y = expression(paste('Total number of steps')))
# plot <- plot + geom_histogram(stat="identity", binwidth = 1000)
# plot <- plot + geom_text(color = "black", size = 5, aes(label = round(TotalSteps, 0), size = 1, hjust = 0.5, vjust = 2))
# plot <- plot + theme(legend.position="none")
# print(plot)
# #ggsave(filename="histogram.png", plot=plot)
# dev.off()
# 3. Calculate and report the mean and median of the total number of steps taken per day
MeanTotalNumberofSteps = mean(ActivityDataSummary$TotalSteps)
MedianTotalNumberofSteps = median(ActivityDataSummary$TotalSteps)
# ------------------------------------------------------------------------------------------------------------------------
# What is the average daily activity pattern?
# ------------------------------------------------------------------------------------------------------------------------
# 1. Make a time series plot (i.e. type = "1") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
ActivityDataTS <- aggregate(ActivityData[, "steps"], by = ActivityData["interval"], FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS) <- c("Interval", "AverageNumberofStepsTaken")
png("timeseries.png",width=800,height=800,units="px",bg="transparent")
TS <- ggplot(data=ActivityDataTS, aes(x=Interval, y=AverageNumberofStepsTaken))
TS <- TS + geom_area(fill="blue", alpha=.2)
TS <- TS + geom_line()
TS <- TS + xlab("5-minute interval")
TS <- TS + ylab("Average number of steps taken")
print(TS)
#ggsave(filename="timeseries.png", plot=TS)
dev.off()
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps
maxPos <- which(ActivityDataTS$AverageNumberofStepsTaken == max(ActivityDataTS$AverageNumberofStepsTaken))
maxInterval <- ActivityDataTS[maxPos,1]
# ------------------------------------------------------------------------------------------------------------------------
# Inputting missing data
# ------------------------------------------------------------------------------------------------------------------------
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
NATotal <- sum(is.na(ActivityData$steps))
# 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. FOr example, you could use the mean/median for that day, or the mean for that 5-minut interval, etc.
# Identify row indices where we have missing values
NAPos <- which(is.na(ActivityData$steps))
# The strategy is to replace the missing valuse by the mean of the 5-min interval
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in
ActivityData[NAPos, "steps"] <- mean(ActivityData$steps, na.rm=TRUE)
head(ActivityData)
# 4. Make a histogram of the total number of steps taken each day and calculate and report the mean and median total number of steps taken per day.
ActivityDataSummary2 <- aggregate(ActivityData[, "steps"], by = ActivityData["date"], FUN=sum, na.rm = TRUE)
colnames(ActivityDataSummary2) <- c("Date", "TotalSteps")
head(ActivityDataSummary2)
hist(ActivityDataSummary2$TotalSteps, breaks = seq(from = 0, to = 25000, by = 500), col="blue", xlab = "Total number of steps taken per day", ylab = "Frequency", main = "Histogram of the total number of steps taken per day")
MeanTotalNumberofSteps2 = mean(ActivityDataSummary2$TotalSteps)
MedianTotalNumberofSteps2 = median(ActivityDataSummary2$TotalSteps)
# ------------------------------------------------------------------------------------------------------------------------
# Differences in activity patterns between weekdays and weekends
# ------------------------------------------------------------------------------------------------------------------------
# 1. Create a new factor variable in the dataset with tho levels - "Weekday" and "weekend" indicating whether a given date is a weekday or a weekend day.
#2. Make a panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekdays or weekend days (y-axis)
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken")
head(ActivityDataTS2)
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS2)
dev.off()
TS2
#2. Make a panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekdays or weekend days (y-axis)
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken")
head(ActivityDataTS2)
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
#TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS2)
dev.off()
TS2
# 1. Create a new factor variable in the dataset with tho levels - "Weekday" and "weekend" indicating whether a given date is a weekday or a weekend day.
#2. Make a panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekdays or weekend days (y-axis)
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken2")
head(ActivityDataTS2)
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken2))
TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS2)
dev.off()
# ------------------------------------------------------------------------------------------------------------------------
# Loading and preprocessing the data
# ------------------------------------------------------------------------------------------------------------------------
library(plyr)
library(data.table)
library(dplyr)
library(ggplot2)
#Note for self - may have to modify date format
#setwd("C:\\Users\\opinon3\\OneDrive\\Documents\\Coursera_ReproducibleResearch\\PeerAssessment1")
setwd("C:\\Users\\Olivia\\OneDrive\\Documents\\Coursera_ReproducibleResearch\\PeerAssessment1")
ActivityData <- read.csv("./repdata_data_activity/activity.csv", stringsAsFactors=FALSE)
# Preprocess the data
# Transform the date into a date format
ActivityData$date <- as.POSIXct(ActivityData$date, format="%Y-%m-%d")
# Get the day of the week from the data
ActivityData$day <- tolower(weekdays(ActivityData$date))
# Identify if day is a week day or not
ActivityData$daytype <- ifelse(ActivityData$day == "saturday" | ActivityData$day == "sunday", "weekend", "weekday")
# ------------------------------------------------------------------------------------------------------------------------
# What is the mean total number of steps taken per day
# ------------------------------------------------------------------------------------------------------------------------
# 1. Calculate the total number of steps taken per day
ActivityDataSummary <- aggregate(ActivityData[, "steps"], by = ActivityData["date"], FUN=sum, na.rm = TRUE)
colnames(ActivityDataSummary) <- c("Date", "TotalSteps")
# This one works too: ActivityData %>% group_by(date) %>% summarize(steps = sum(steps))
head(ActivityDataSummary)
# 2. Make a histogram of the total number of steps taken each day
hist(ActivityDataSummary$TotalSteps, breaks = seq(from = 0, to = 25000, by = 500), col="green", xlab = "Total number of steps taken per day", ylab = "Frequency", main = "Histogram of the total number of steps taken per day")
##### 2. Make a histogram of the total number of steps taken each day - NOT THIS
# png("histogram.png",width=800,height=800,units="px",bg="transparent")
# plot <- ggplot(ActivityDataSummary, aes(factor(Date), TotalSteps, fill = Date))
# plot <- plot + labs(title = expression(paste('Total number of steps taken per day')), x = "Date", y = expression(paste('Total number of steps')))
# plot <- plot + geom_histogram(stat="identity", binwidth = 1000)
# plot <- plot + geom_text(color = "black", size = 5, aes(label = round(TotalSteps, 0), size = 1, hjust = 0.5, vjust = 2))
# plot <- plot + theme(legend.position="none")
# print(plot)
# #ggsave(filename="histogram.png", plot=plot)
# dev.off()
# 3. Calculate and report the mean and median of the total number of steps taken per day
MeanTotalNumberofSteps = mean(ActivityDataSummary$TotalSteps)
MedianTotalNumberofSteps = median(ActivityDataSummary$TotalSteps)
# ------------------------------------------------------------------------------------------------------------------------
# What is the average daily activity pattern?
# ------------------------------------------------------------------------------------------------------------------------
# 1. Make a time series plot (i.e. type = "1") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
ActivityDataTS <- aggregate(ActivityData[, "steps"], by = ActivityData["interval"], FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS) <- c("Interval", "AverageNumberofStepsTaken")
png("timeseries.png",width=800,height=800,units="px",bg="transparent")
TS <- ggplot(data=ActivityDataTS, aes(x=Interval, y=AverageNumberofStepsTaken))
TS <- TS + geom_area(fill="blue", alpha=.2)
TS <- TS + geom_line()
TS <- TS + xlab("5-minute interval")
TS <- TS + ylab("Average number of steps taken")
print(TS)
#ggsave(filename="timeseries.png", plot=TS)
dev.off()
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps
maxPos <- which(ActivityDataTS$AverageNumberofStepsTaken == max(ActivityDataTS$AverageNumberofStepsTaken))
maxInterval <- ActivityDataTS[maxPos,1]
# ------------------------------------------------------------------------------------------------------------------------
# Inputting missing data
# ------------------------------------------------------------------------------------------------------------------------
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
NATotal <- sum(is.na(ActivityData$steps))
# 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. FOr example, you could use the mean/median for that day, or the mean for that 5-minut interval, etc.
# Identify row indices where we have missing values
NAPos <- which(is.na(ActivityData$steps))
# The strategy is to replace the missing valuse by the mean of the 5-min interval
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in
ActivityData[NAPos, "steps"] <- mean(ActivityData$steps, na.rm=TRUE)
head(ActivityData)
# 4. Make a histogram of the total number of steps taken each day and calculate and report the mean and median total number of steps taken per day.
ActivityDataSummary2 <- aggregate(ActivityData[, "steps"], by = ActivityData["date"], FUN=sum, na.rm = TRUE)
colnames(ActivityDataSummary2) <- c("Date", "TotalSteps")
head(ActivityDataSummary2)
hist(ActivityDataSummary2$TotalSteps, breaks = seq(from = 0, to = 25000, by = 500), col="blue", xlab = "Total number of steps taken per day", ylab = "Frequency", main = "Histogram of the total number of steps taken per day")
MeanTotalNumberofSteps2 = mean(ActivityDataSummary2$TotalSteps)
MedianTotalNumberofSteps2 = median(ActivityDataSummary2$TotalSteps)
# ------------------------------------------------------------------------------------------------------------------------
# Differences in activity patterns between weekdays and weekends
# ------------------------------------------------------------------------------------------------------------------------
# 1. Create a new factor variable in the dataset with tho levels - "Weekday" and "weekend" indicating whether a given date is a weekday or a weekend day.
#2. Make a panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekdays or weekend days (y-axis)
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken")
head(ActivityDataTS2)
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS2)
dev.off()
TS2
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken")
head(ActivityDataTS2)
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
par(mfrow=c(2,1))
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS2)
dev.off()
TS2
#2. Make a panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekdays or weekend days (y-axis)
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken")
head(ActivityDataTS2)
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
TS2 <- TS2 + layout(c(2,1))
print(TS2)
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken")
head(ActivityDataTS2)
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
TS2 <- ggplot(data=ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_wrap(~DayType)
TS2 <- TS2 + geom_line()
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
TS2 <- TS2 + layout=c(2,1)
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS2)
dev.off()
TS2
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(~DayType)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
TS2 <- TS2 + layout=c(2,1)
print(TS2)
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(~DayType)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
TS2 <- TS2 + layout=c(1,2)
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(~DayType)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
TS2 <- TS2 + layout=c(2,2)
print(TS2)
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(~DayType)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
TS2 <- TS2 + layout=c(1,2)
print(TS2)
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(~DayType)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
TS2
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
par(mfrow=c(2,1))
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(~DayType)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
TS2
par(mfrow=c(2,1))
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(~DayType)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(DayType~.)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
TS2
par(mfrow=c(2,1))
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(DayType~.)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
TS2
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
#TS2 <- TS2 + facet_grid(DayType~.)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
TS2
# ------------------------------------------------------------------------------------------------------------------------
# Loading and preprocessing the data
# ------------------------------------------------------------------------------------------------------------------------
library(plyr)
library(data.table)
library(dplyr)
library(ggplot2)
#Note for self - may have to modify date format
#setwd("C:\\Users\\opinon3\\OneDrive\\Documents\\Coursera_ReproducibleResearch\\PeerAssessment1")
setwd("C:\\Users\\Olivia\\OneDrive\\Documents\\Coursera_ReproducibleResearch\\PeerAssessment1")
ActivityData <- read.csv("./repdata_data_activity/activity.csv", stringsAsFactors=FALSE)
# Preprocess the data
# Transform the date into a date format
ActivityData$date <- as.POSIXct(ActivityData$date, format="%Y-%m-%d")
# Get the day of the week from the data
ActivityData$day <- tolower(weekdays(ActivityData$date))
# Identify if day is a week day or not
ActivityData$daytype <- ifelse(ActivityData$day == "saturday" | ActivityData$day == "sunday", "weekend", "weekday")
# ------------------------------------------------------------------------------------------------------------------------
# What is the mean total number of steps taken per day
# ------------------------------------------------------------------------------------------------------------------------
# 1. Calculate the total number of steps taken per day
ActivityDataSummary <- aggregate(ActivityData[, "steps"], by = ActivityData["date"], FUN=sum, na.rm = TRUE)
colnames(ActivityDataSummary) <- c("Date", "TotalSteps")
# This one works too: ActivityData %>% group_by(date) %>% summarize(steps = sum(steps))
head(ActivityDataSummary)
# 2. Make a histogram of the total number of steps taken each day
hist(ActivityDataSummary$TotalSteps, breaks = seq(from = 0, to = 25000, by = 500), col="green", xlab = "Total number of steps taken per day", ylab = "Frequency", main = "Histogram of the total number of steps taken per day")
##### 2. Make a histogram of the total number of steps taken each day - NOT THIS
# png("histogram.png",width=800,height=800,units="px",bg="transparent")
# plot <- ggplot(ActivityDataSummary, aes(factor(Date), TotalSteps, fill = Date))
# plot <- plot + labs(title = expression(paste('Total number of steps taken per day')), x = "Date", y = expression(paste('Total number of steps')))
# plot <- plot + geom_histogram(stat="identity", binwidth = 1000)
# plot <- plot + geom_text(color = "black", size = 5, aes(label = round(TotalSteps, 0), size = 1, hjust = 0.5, vjust = 2))
# plot <- plot + theme(legend.position="none")
# print(plot)
# #ggsave(filename="histogram.png", plot=plot)
# dev.off()
# 3. Calculate and report the mean and median of the total number of steps taken per day
MeanTotalNumberofSteps = mean(ActivityDataSummary$TotalSteps)
MedianTotalNumberofSteps = median(ActivityDataSummary$TotalSteps)
# ------------------------------------------------------------------------------------------------------------------------
# What is the average daily activity pattern?
# ------------------------------------------------------------------------------------------------------------------------
# 1. Make a time series plot (i.e. type = "1") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
ActivityDataTS <- aggregate(ActivityData[, "steps"], by = ActivityData["interval"], FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS) <- c("Interval", "AverageNumberofStepsTaken")
png("timeseries.png",width=800,height=800,units="px",bg="transparent")
TS <- ggplot(data=ActivityDataTS, aes(x=Interval, y=AverageNumberofStepsTaken))
TS <- TS + geom_area(fill="blue", alpha=.2)
TS <- TS + geom_line()
TS <- TS + xlab("5-minute interval")
TS <- TS + ylab("Average number of steps taken")
print(TS)
#ggsave(filename="timeseries.png", plot=TS)
dev.off()
# 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps
maxPos <- which(ActivityDataTS$AverageNumberofStepsTaken == max(ActivityDataTS$AverageNumberofStepsTaken))
maxInterval <- ActivityDataTS[maxPos,1]
# ------------------------------------------------------------------------------------------------------------------------
# Inputting missing data
# ------------------------------------------------------------------------------------------------------------------------
# 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
NATotal <- sum(is.na(ActivityData$steps))
# 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. FOr example, you could use the mean/median for that day, or the mean for that 5-minut interval, etc.
# Identify row indices where we have missing values
NAPos <- which(is.na(ActivityData$steps))
# The strategy is to replace the missing valuse by the mean of the 5-min interval
# 3. Create a new dataset that is equal to the original dataset but with the missing data filled in
ActivityData[NAPos, "steps"] <- mean(ActivityData$steps, na.rm=TRUE)
head(ActivityData)
# 4. Make a histogram of the total number of steps taken each day and calculate and report the mean and median total number of steps taken per day.
ActivityDataSummary2 <- aggregate(ActivityData[, "steps"], by = ActivityData["date"], FUN=sum, na.rm = TRUE)
colnames(ActivityDataSummary2) <- c("Date", "TotalSteps")
head(ActivityDataSummary2)
hist(ActivityDataSummary2$TotalSteps, breaks = seq(from = 0, to = 25000, by = 500), col="blue", xlab = "Total number of steps taken per day", ylab = "Frequency", main = "Histogram of the total number of steps taken per day")
MeanTotalNumberofSteps2 = mean(ActivityDataSummary2$TotalSteps)
MedianTotalNumberofSteps2 = median(ActivityDataSummary2$TotalSteps)
# ------------------------------------------------------------------------------------------------------------------------
# Differences in activity patterns between weekdays and weekends
# ------------------------------------------------------------------------------------------------------------------------
# 1. Create a new factor variable in the dataset with tho levels - "Weekday" and "weekend" indicating whether a given date is a weekday or a weekend day.
#2. Make a panel plot containing a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekdays or weekend days (y-axis)
ActivityDataTS2 <- aggregate(ActivityData$steps, by = list(ActivityData$daytype, ActivityData$day, ActivityData$interval), FUN=mean, na.rm = TRUE)
colnames(ActivityDataTS2) <- c("DayType", "Day", "Interval", "AverageNumberofStepsTaken")
head(ActivityDataTS2)
png("timeseries2.png",width=800,height=800,units="px",bg="transparent")
par(mfrow=c(2,1))
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
#TS2 <- TS2 + facet_grid(DayType~.)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
#ggsave(filename="timeseries2.png", plot=TS2)
dev.off()
TS2
TS2 <- ggplot(ActivityDataTS2, aes(x=Interval, y=AverageNumberofStepsTaken))
TS2 <- TS2 + facet_grid(DayType~.)
TS2 <- TS2 + geom_line(color="blue")
TS2 <- TS2 + xlab("5-minute interval")
TS2 <- TS2 + ylab("Average number of steps taken")
print(TS2)
knit2html()
knit2html()
install.packages("knitr")
knit2html()
knit2html(PA1_template.rmd)
knit2html(PA1_template.Rmd)
knit2html("PA1_template.RmD")
setwd("C:\\Users\\Olivia\\OneDrive\\Documents\\Coursera_ReproducibleResearch\\PeerAssessment1\\Submission")
knit2html("PA1_template.RmD")
library(knitr)
knit2html("PA1_template.RmD")
